Why writing blogs

1. Share? Like, for a long time I would learn from random online blogs,
   articles, etc. I benefit from them. So now I would also do this thing.
   Would be a good thing.
2. Monetise. As our blogs grows big, we might be able to make money from
   it ... There should be many examples. Paul Graham? ESR? - This is also like
   writing books?
3. Make friends. Connect with people.
4. Just for fun.

Some reasons that count less:
1. Practice writing skills. - We could also practice writing skills by
   writing privately, without publishing.
2. As taking notes. - Do we really need notes? Not really much. There are
   too much on the Internet, and today we have Deepseek.

---

Some reflects on Haskell

Pure function and side-effect: provides Mathematically provable functions.
This is good and I should go using Haskell?

Could we also implement this in C? As a outside pure-function checker?

But ... do we really need this? No? There are so many C projects there
before Haskell and the test works just fine.

---

Separating IO results in Mathematically proveable pure functions. However,
we still need to inspect the whole code, because the IO part is controlled
by the pure part. This doesn't give us the convenience of just checking
the IO part and could skip checking the pure parts.

---

NetBSD: I checked wireless driver, `urtwn`, the manual pages - said ported
from FreeBSD. And the Intel driver also ported from FreeBSD.

I finally get back to Linux because of GPL. It better supports open source?

* different disk mechanism - is this the old Unix way?
  * wrap own partition - must be one of the four primary partitions
    in the case of MBR - and do stuff internally
  * use the name 'disklabel'
  * 'wedges' - something like mapping?
* can't mount ext4 by default. Oh. Need to recompile the kernel?
* quite traditional tty - ncurses really slow in cursor flick, like in
  lynx(1)
* pkgsrc is really smart and great
* has a persistent on-usb-drive derivate? or is it FreeBSD? not sure about
  my memory.
* there is a rtfm.org, with a /netbsd?
* KASLR - looks cool but page fault at boot. Can't get in at all. At least
  I reinstalled with the normal kernel.

T2SDE - like BSD/pkgsrc?
* surprisingly old. even some months older than Gentoo, in the 1990s?
  as described in its FAQ.

AntiX Linux - actually has GUI, and is anti- `systemd` and `elogind`,
not 'X'.

Damn small Linux - 600M? Well I finally just use the Debian netinst,
the same 600M.

---

git-push via ssh

Remember to `eval $(ssh-agent -s)` and `ssh-add`. Otherwise `ssh` would only
try to use the default filenames in `~/.ssh/` and won't find our keys.

I only find this by using the verbose option with `ssh -T`. In the debug
log it shows that `ssh` by default only looks for various default
filenames in `~/.ssh~`.

---

open-source, free software - should better be called `public software`?

The pros is that, the code is put publicly available, e.g. on GitHub.
Thus, we don't need to fear about our code getting edited by some malware,
because we have the code on GitHub, and if the code is edited, `git` would
tell us that there is a conflict.

On the contrary, if we write code privately, it would be more difficult
to tell whether our code gets edited by some malware, both possibly from
local malware and remote access malware - since the malware has local access,
it could fool the local `git`. If we have a duplicate on GitHub, and even
better, in other people's computers and forks, the integrity would be better
guarded.

---

Why open-source

1. Integrity. As discussed above.
2. Share knowledge. It would be great if all the applicants we are using
   every day are source available. We could just grab the source and study
   if we want to.

---

Hardware accessibility

Microsoft Windows usually could only run on the latest-generation hardware.
So do the applications running on Microsoft Windows. We could understand
that this is due to:
1. Less development cost. The employee could spend less time optimising and
   use more dirty-and-slow-and-space-consuming methods.
2. WinTel companion. Let us buy new hardware.
3. Push the development of the hardware industry. If people don't buy new
   hardware, the hardware industry might not proceed?

And we say this is not a problem? Because the price of the device is
generally affordable.

That's the question.

Yes, it's affordable for one device, but what about multiple device?

And, thousands of device?

E.g. in server. In education - one classroom with like sixty computers.

And, for startup, small business. - therefore we say, open source
helps startup and small business, and therefore helps innovation and
economic.

And for kids. We could buy cheap hardware for kids, and won't fear about
kids smashing the device - just buy a new one! Since the device is cheap,
we could be really easy on buying really many devices.

And for gifts. We could design programs and send as gifts to people. And
design embedded device.

Also, accessibility for blind users? - Microsoft Windows forces users to
use GUI. CLI should be absolutely much more easier for blind users?

---

Why should we use open-source

* What we learnt really counts. Like, the servers, the embedded industry
and the researchers use open-source. Thus, we learn things during use,
and we would probably make money from it, like use it to find jobs.
* Hardware accessibility.
  1. Price.
  2. Size. We could use really small device and save space!
* Accessibility for blind users. - Be kind to other people!

---

Why writing blogs and open-source

As a backup - like, we could publish our files, like configurations, to
GitHub. Then we could just download them when we need.

No. Downloading when we need is not the point. We could rewrite any time
anyway. The point is integrity. We could then guard our files getting
edited by malware - we could know it because if files are edited, there
would be `git` conflicts.

---

Just checked kernel.org and surprisingly found that Google is one of the
sponsors. Wow. That's why so many people in the maillist use gmail? lol

Also: EQUINIX, MATAL, fastly, Red Hat, CONSTELLIX, PURE STORAGE

---

www.joonet.de/lilo
last messages:
2015/11/22 24.2
2014/10/17 24.1
2013
2011
2010/6/6   Initial restart of LILO development.

wow, it's BSD. Not GPL. So I would go GRUB.

salsa.debian.org/public - a Debian-GitHub?

---

on the name order - some use family-first, like many contemporary
famous people, and like Xi Ruoyao as I saw in the LFS page and maillist.
The family-last manner looks to be more traditional. Like people in the
20 century uses this form. Like Xingshen Chen, Chengtong Yau. I would
just use the current one so I don't need to get another email address.

---

Freshmeat?
freshmeat.net
redirected to SOURCEFORGE??

Freshmeat integration

lwn.net/Articles/604100
July 2, 2014
Freecode.com discontinued

---

72 columns: leave space for line numbers and diff etc.?
and email quote

modern reason: for the sharing of code and content in videos

rwxrob.github.io/zet/1303

---

Why build from source, instead of using binary packages

1. Configuration and customisation - edit the code.
2. Hardware accessibility.
   * Binary unavailble for our chips.
   * Build smaller ones - e.g. by configuration and customisation.
3. Learn things. We then have the experience of compiling from source.
   Might be useful for work.
4. Some applicants just do not release binary packages, or it is
   more difficult to find where the binary packages are.

Why LFS writes only building from source? - Just think of why many people
would go building LFS - probably because of some special chips - and
for embedded systems to get a compact Linux - when embedded systems often
get special chips.
   What's more, for embedded systems people would need to cut the source
to get smaller binary. That's again why compiling from source is required.
   But does LFS really not include instructions of using existing binary?
To check ...

I remember that in LFS there is some several-pass build - build with the
GCC configured as the environment of the target device - why?
glibc-compatibility? to check ... really curious about this.

And what's more, some stuff just do not release binary packages, or it is
more difficult to find where the binary packages are:
1. Most importantly, the kernel itself? It doesn't release binary, but
   only source package?
2. New versions. - Well, in fact I think many applicants just don't
   provide binary package *at all*, and the binary is only packaged
   by the distros.

Well, distos might work when they work. But when it breaks, if we are
lucky we could fix but not rebuilding, but we would, often, probably,
eventually, need to build from source to debug to see what's wrong.
This also applies to other software. All software.

---

GitHub block is, surprisingly, just simply DNS block. A simple `hosts` solves
the issue.

---

Strange wireless behaviour on Slackware

Full install = CONN_FAILED, reproduced on another device.
	I cannot believe that this is reproducible. lol.
Only installing A and then installing needed packages by hand with
`installpkg`, then works. But still from time to time CONN_FAILED, and
device completely missing from `ifconfig` after reboot - and it comes up
again in the next reboot.

Too little voltage? Maybe.

---

Glad to see in the awesome-C list that there are people duplicating
git(1) and SQLite.

uhub/awesome-c
mpv-player
videolan/vlc
libgit2
cstack/db_tutorial
pymumu/smartdns

---

CLI v.s. GUI

1. There are many people who have been used to CLI and don't use GUI at all
- except using the web browsers. Therefore, if we write our programs in
GUI, those people would not use them.
2. Accessibility for blind people.
3. GUI is invented much later. At first everyone only has character console.
   So, GUI is really unnecessary.
4. Make us look geeky and cool? Then people would know we know stuff about
   computer? lol
5. Hardware accessibility
   1. Price
   2. Size
   3. Mouse not required - good for embedded in-hand, or in-palm, small
      devices - and could reduce laptop size because the touchpad could
      be cut.

---

The reason behind kindness

Why should we be kind? The reason is somewhat cruel - because being kine helps
us live by.

Why is that? Because, if we help people, other people would help us.

Why would other people help us if we help people? - If someone, let's say
P, don't help us, other people would see that P do not help us - do not help
a 'good' person, who help other people. Then, as a result, P would get less
help.

If we help other people, people would know that we are the kind of people
that would help other people, and therefore, we might help them sometimes.
This increases our survival probability.

---

Why write in English?

1. For secret. Sometimes we don't want people know what we are writing about,
and those people don't read English well.

2. For others to read. English is the world language. When there are
readers with various natural language background, English would be a good
choice of written language. Easier reading results in higher productivity
and more convenience.

See also: Simplified Technical English, controlled natural languages.

===

Use Plain Text as Data Format

1. Tools to view and edit.

For others to read and write. The target audience do write code, and the code
is plain text, therefore the target audience do have plain text editors and
they are familiar with their editors, such as Vim, Emacs and VSCode.

Tools are important. People use different platforms, such as BSDs, various
Linux distributions, Windows, macOS on M1, ARM, x86, x64 etc. It is
challenging for tools to support various platforms. For this reason, it is
challenging to invent new tools.

That's the point. If use other invented format other than plain text, new
tools are needed to be invented. Tuning the new tool bug-free on one certain
platform is challenging enough, not to mention so many platforms.

Since there are tools, the file becomes easily manipulated.

This becomes especially convenience when embedding view and edit functionality
to other applications. A text edit widget is good. Imagine developing one
dedicated view and edit widget for thousands of SDKs: Qt, Gtk, C#, Android,
macOS, iOS ...

2. Search. Plain text is naturally searchable.

3. Freedom. No speical tools makes the format freedom. The users would not be
forced to do something or not by the user interface of the dedicated editors.

4. No file corruption, like what happens in databases. When something goes
wrong, the user could always go for a look.

See also:
- https://github.com/todotxt/todo.txt#why-plain-text

ginatrapani.org
weeks.ginatrapani.org

===

Why not auto-wrap but wrap by hand?

So that the diff output would be easier to read, especially when using Git.
The diff utility was designed for code text, and therefore works by line. Code
text is like poetry text, where there are frequent line breaks.

Therefore, the choice of line length, like 80 characters, is less important.

===

Migrate Python code to C - Reverse CRC32

Data type. Overflow.

===

Mouse / Touchpad. Keyboard. Keyboard is essential.

Finger, hand and arm muscle feel tired using touchpad.

Minimise use of pointing device.

===

Vim multi-line insert: C-v Shift-i

===

Sleep as early as possible. Don't do things at night. Want to do something?
Go to sleep. You won't want anything during sleep. If you sleep enough, you
will get up early, and you can do the thing at the morning. If you can not
get up early, you do not sleep enough, and therefore you should sleep earlier.

